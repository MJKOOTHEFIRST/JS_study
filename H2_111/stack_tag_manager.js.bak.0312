// stack_tag_manager.js

// 체크박스 상태 변경 감지 및 버튼 텍스트 업데이트
document.addEventListener('change', function(event) {
  if (event.target.type === 'checkbox' && event.target.name === 'search-checkbox') {
    updateTagButtonLabel();
  }
});

function updateTagButtonLabel() {
  const checkboxes = document.querySelectorAll('#stack_search_table input[type="checkbox"][name="search-checkbox"]');
  const tagButton = document.getElementById('new-tag');
  let labelExists = false;
  let checkedExists = false;
  let checkedLabels=[]; // 체크된 체크박스의 라벨 값을 저장할 배열

  checkboxes.forEach(checkbox => {
    if (checkbox.checked) {
      checkedExists = true ; // 체크된 체크박스가 존재함을 표시
      const row = checkbox.closest('tr');
      const label = row.querySelector('td:last-child').textContent.trim();
      if (label) {
        labelExists = true;
        checkedLabels.push(label); // 체크된 체크박스의 라벨 값을 배열에 추가
      }
    }
  });

  // 체크된 체크박스의 라벨 값들을 콘솔에 출력
  console.log("체크된 라벨들 :", checkedLabels);

  // 체크박스가 선택되어 있으면서 라벨이 있는 경우
  if (checkedExists && labelExists) {
    tagButton.textContent = '라벨 ᐧ 태그 수정';
  } 
  // 체크박스가 선택되어 있지만 라벨이 없는 경우
  else if (checkedExists && !labelExists){
    tagButton.textContent = '라벨 ᐧ 태그 생성';
  }
  // 체크박스가 선택되어 있지 않은 경우
  else{
    tagButton.textContent='태그 생성';
  
  }
}

// 페이지 로드 시 초기 버튼 텍스트 설정
document.addEventListener('DOMContentLoaded', function() {
  updateTagButtonLabel();
});

// 색상 선택기의 이벤트 리스너 설정
document.querySelector('#tag-color').addEventListener('change', updateTagColor);

// 환경상 GET으로 태그 데이터를 저장하는 것으로 개발
// 태그와 색상을 서버로 전송하는 함수 
function saveTagWithGet(tagName, color) {
  // 쿼리 파라미터를 URL에 추가
  const url = new URL('/FDC/work/dev/js/main/save_tag.php', window.location.origin);
  const params = { tag: tagName, color: color };
  url.search = new URLSearchParams(params).toString();

  fetch(url)
  .then(response => {
    if (response.ok) {
      console.log('태그가 성공적으로 보내졌습니다.');
      // return response.text();
      return response.json();
    }
    throw new Error('태그 저장에 실패했습니다.');
  })
  // .then(text => console.log(text))
  .then(data => console.log(data))
  // .catch(error => console.error(error));
  .catch(error => console.error(error));
}

// 태그 추가 및 서버로 전송
document.getElementById('new-tag').addEventListener('click', function() {
  const tagText = document.getElementById('new-tag-text').value.trim();
  if (tagText) {
    // 태그명과 선택된 색상을 서버로 전송하는 로직 구현
    const selectedColor = document.querySelector('#tag-color').value;
    saveTagWithGet(tagText, selectedColor);

    // 태그 추가
    const hashtagOuter = document.querySelector('.scrollmini.hashtag-outer');
    const newHashtagDiv = document.createElement('div');
    newHashtagDiv.classList.add('hashtag');

    // 새로운 버튼 생성
    const newButton = document.createElement('button');
    newButton.classList.add('main');
    newButton.style.setProperty('--tag-color', selectedColor); // css변수 설정을 button에 적용

    // 새로운 span 요소 생성 및 스타일 설정
    const newSpan = document.createElement('span');
    newSpan.classList.add('tag-color'); // 배경색을 위한 클래스 추가
    newSpan.textContent = tagText; // '#' 기호를 제외한 텍스트 설정

    // 버튼에 span 추가
    newButton.appendChild(newSpan);

    // 삭제 버튼 추가
    const delButton = document.createElement('button');
    delButton.classList.add('del');
    delButton.title = '삭제';
    delButton.textContent = '×';

    // 완료 버튼 추가 (필요한 경우)
    const finishButton = document.createElement('button');
    finishButton.classList.add('finish');
    finishButton.title = '완료';
    finishButton.textContent = '×';

    // div에 버튼들 추가
    newHashtagDiv.appendChild(newButton);
    newHashtagDiv.appendChild(delButton);
    newHashtagDiv.appendChild(finishButton);

    // 최종적으로 hashtagOuter에 추가
    hashtagOuter.appendChild(newHashtagDiv);

    // 입력 필드 초기화
    document.getElementById('new-tag-text').value = '';
  } else {
    alert('태그명을 입력해주세요.');
  }
});

// 태그 호출(GET, fetch는 HTTP 메소드를 별도로 지정하지 않으면 GET 요청이 기본적으로 수행된다.)
// 태그 데이터를 불러와서 렌더링하는 함수
function renderTags(tags) {
  const hashtagOuter = document.querySelector('.scrollmini.hashtag-outer');
  tags.forEach(tag => {
    const hashtagDiv = document.createElement('div');
    hashtagDiv.classList.add('hashtag');
    const button = document.createElement('button');
    button.classList.add('main');

    // 새로운 span 요소 생성
    const newSpan = document.createElement('span');
    
    // 태그 이름 설정
    newSpan.textContent = tag.name;

    // 배경색 설정
    if (tag.color && tag.color !== 'undefined') {
      newSpan.classList.add('tag-color'); // 배경색을 위한 클래스 추가
      newSpan.dataset.color = tag.color; // 데이터 속성을 사용하여 정보 저장
      button.style.setProperty('--tag-color', tag.color); // CSS 변수 설정을 button에 적용
    }

    // 버튼에 span 추가
    button.appendChild(newSpan);

    // div에 버튼 추가
    hashtagDiv.appendChild(button);

    // 삭제 버튼 추가
    const delButton = document.createElement('button');
    delButton.classList.add('del');
    delButton.title = '삭제';
    delButton.textContent = '×';
    hashtagDiv.appendChild(delButton);

    // 완료 버튼 추가
    const finishButton = document.createElement('button');
    finishButton.classList.add('finish');
    finishButton.title = '완료';
    finishButton.textContent = '×';
    hashtagDiv.appendChild(finishButton);

    // 최종적으로 hashtagOuter에 추가
    hashtagOuter.appendChild(hashtagDiv);
  });
}
// 태그 호출(GET, fetch는 HTTP 메소드를 별도로 지정하지 않으면 GET 요청이 기본적으로 수행된다.)
document.addEventListener('DOMContentLoaded', function() {
    fetch('/FDC/work/dev/js/main/load_tags.php')
      .then(response => {
        if (!response.ok) {
          throw new Error('태그를 불러오는데 실패했습니다.');
        }
        return response.json();
      })
      .then(tags => {
        renderTags(tags); // 여기에서 renderTags 함수를 호출하여 태그 렌더링 처리
      })
      .catch(error => console.error('Error loading tags:', error));
});

// 태그 삭제 기능 추가
document.addEventListener('click', function(event) {
  if (event.target.classList.contains('del')) {
    const tagToRemove = event.target.parentElement.querySelector('span').textContent.trim();
    removeTag(tagToRemove);
    event.target.parentElement.remove();
  }
});

// 태그 삭제 함수
function removeTag(tagName) {
  // 태그 삭제를 위한 서버 요청
  const url = new URL('/FDC/work/dev/js/main/delete_tag.php', window.location.origin);
  const params = { tag: tagName };
  url.search = new URLSearchParams(params).toString();

  fetch(url)
  .then(response => {
    if (response.ok) {
      console.log('태그가 성공적으로 삭제되었습니다.');
      // return response.text();
      return response.json();
    }
    throw new Error('태그 삭제에 실패했습니다.');
  })
  // .then(text => console.log(text))
  .then(data => console.log(data))
  // .catch(error => console.error(error));
  .catch(error => console.error(error));
}

